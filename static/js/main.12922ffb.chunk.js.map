{"version":3,"sources":["Components/NavBar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","herf","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","handleCopy","navigator","clipboard","writeText","handleExtraSpaces","split","join","filter","element","defaultProps","aboutText","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","key","Date","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.12922ffb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" herf=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" aria-current=\"page\" herf=\"#\">Home</a>\r\n                            {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" herf=\"/about\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value) \r\n    }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    // const capitalize = (word) => {\r\n    //     const lower = word.toLowerCase();\r\n    //     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    // }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           {/* <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}  */}\r\n           <strong>{props.alert.type}</strong>: {props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n//We used props.alert && because if it is null the value further will not be used and if not null we will go futher, this happens because all the JSX will be converted to Javascript Calls!\r\n// {} - used for javascript\r\n// {{}} - used when an object is written in javascript\r\n// `` - used for template literals, allows to embed expressions directly within the string using plaeholders, $(dollar)\r\n\r\n","import './App.css';\nimport Navbar from './Components/NavBar';\nimport TextForm from './Components/TextForm';\n// import About from './Components/About';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\n          </Route>\n    </Switch> */}\n    <TextForm showAlert={showAlert} heading=\"Textutiles\" mode={mode}/>\n    </div>\n    {/* </Router> */}\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}